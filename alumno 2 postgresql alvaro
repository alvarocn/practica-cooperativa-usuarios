1) Averigua que privilegios de sistema hay en Postgres y como se asignan a un usuario.

	CREATE ROLE agrega una nueva función a un clúster de base de datos PostgreSQL. Un rol es una entidad que puede tener objetos de base de 	datos y tener privilegios de base de datos. Un rol puede considerarse un "usuario", un "grupo", o ambos, dependiendo de cómo se use.Para tener 		el privilegio CREATEROLE o ser un superusuario de la base de datos para usar este comando.

	Los privilegios pueden asignarse a los roles en la propia creación del rol o con posterioridad:

	- CREATE ROLE <nombre_rol> WITH <opcion>;---> Para asignar al ser creados los roles.
	- ALTER ROLE <nombre_rol>  WITH <opcion>;----> Para asignar posteriormente una vez ya creados.


	

	Opciones de privilegios:

	SUPERUSER | NOSUPERUSER --> Privilegio de superusuario.
	CREATEDB | NOCREATEDB --> Privilegio para crear base de datos.
	CREATEROLE | NOCREATEROLE --> Privilegio para 
	INHERIT | NOINHERIT --> Privilegio que determina si un rol "hereda" los privilegios de los que es miembro.
	LOGIN | NOLOGIN --> privilegio que determina si un rol puede iniciar sesión.
	REPLICATION | NOREPLICATION --> Determina si un rol es de replicación. Debe de tener este atributo para poder conectarse al servidor en modo de replicación.
	BYPASSRLS | NOBYPASSRLS --> determina si un rol tiene todas las políticas a nivel de fila.
	CONNECTION LIMIT  -->  Limita el número de sesiones concurrentes.
	[ ENCRYPTED ] PASSWORD --> Establece la contraseña del rol.
	VALID UNTIL 'timestamp' --> Establece una fecha y hora después de la cual la contraseña del rol ya no es válida.
	IN ROLE --> Enumera uno o más roles existentes a los que el nuevo rol se agregará inmediatamente como un nuevo miembro.
	ADMIN  --> Indica el rol o los roles de los formará parte con derecho a agregar a otros roles en este. 



2) Averigua cual es la forma de asignar y revocar privilegios sobre una tabla concreta en Postgres.

	- Para otorgar privilegios como para revocar debemos tener rol de superusuarios ser el dueño de la dicha tabla o tener otorgado la opción WITH GRANT OPTION.


	Privilegios:

	SELECT --> Permite SELECCIONAR desde cualquier columna, o columnas específicas, de una tabla.
	INSERT --> Permite INSERTAR una nueva fila en una tabla, vista, etc.
	UPDATE --> Permite ACTUALIZAR cualquier columna, o columnas específicas, de una tabla, vista.
	DELETE --> Permite ELIMINAR una fila de una tabla, vista, etc.
	TRUNCATE --> Permite eliminar todas las filas de una tabla sin escanearla.
	REFERENCES --> Permite la creación de una restricción de clave externa que hace referencia a una tabla o columnas específicas de una tabla.
	TRIGGER --> Permite la creación de un disparador en una tabla, vista, etc.
	CREATE --> Para bases de datos, permite crear nuevos esquemas y publicaciones dentro de la base de datos.
	CONNECT --> Permite al concesionario conectarse a la base de datos.
	TEMPORARY --> Permite crear tablas temporales mientras se usa la base de datos.
	EXECUTE --> Permite llamar a una función o procedimiento, incluido el uso de cualquier operador que se implemente encima de la función.
	USAGE --> Para lenguajes de procedimiento, permite el uso del lenguaje para la creación de funciones en ese idioma.

	- Para asignar privilegios sobre una tabla en POSTGRESQL sería así:

	GRANT [privilegios] ON [objeto] TO {public | group | username}   [WITH GRANT OPTION]

	Ejemplos:

	(postgres)
	alvaro2=# GRANT SELECT ON usuarios TO cliente2 ;
	GRANT

	(cliente)
	alvaro2=> select * from usuarios ;
	 nombre | clave  
	--------+--------
	 alvaro | 472126
	(1 row)

	alvaro2=> 




- Para revocar privilegios:

	REVOKE [privilegios] ON [objeto] from {public | group | username}

	Ejemplos:

	(Desde usuario postgres)
	alvaro2=# REVOKE SELECT ON usuarios from cliente2 ;
	REVOKE

	(Desde cliente)
	alvaro2=> select * from usuarios ;
	ERROR:  permission denied for table usuarios
	alvaro2=> select * from usuarios ;

3) Averigua si existe el concepto de rol en Postgres y señala las diferencias con los roles de ORACLE.

	Si existe.

	En oracle un rol es un conjunto o grupo de privilegios que se pueden otorgar a los usuarios u otro rol. En Postgresql un rol puede 	considerarse como un usuario de la base de datos o un grupo de usuarios de la base de datos. Los roles pueden poseer objetos de base de datos y pueden 	asignar privilegios sobre esos objetos a otros roles. Cualquier rol puede actuar como usuario, grupo o ambos.

	Fuente: https://www.postgresql.org/docs/8.1/user-manag.html
	Fuente: https://www.techonthenet.com/oracle/roles.php

	- Para crear un rol en oracle sería así:
	
	"CREATE ROLE <nombrederol>;"
	
	- Asignamos permisos al rol

	"GRANT <PRIVILEGIOS> ON tabla TO <NOMBREDEROL>;"


	- Por último asignamos ese rol al usuario

	GRANT <nombrederol> TO <usuarios>;


4) Averigua si existe el concepto de perfil como conjunto de límites sobre el uso de recursos o sobre la contraseña en Postgres y señala las diferencias con los perfiles de ORACLE.

El concepto perfil en postgres no existen, en oracle un profile o perfil de usuario es un conjunto de límites de recursos a los que se le asigna un nombre. Los perfiles pueden ser asignados a diferentes usuarios o grupos de usuarios para controlar y limitar el uso de recursos del sistema.


5) Realiza consultas al diccionario de datos de Postgres para averiguar todos los privilegios que tiene un usuario concreto.



	select privilege_type
	from information_schema.table_privileges 
	where grantee=<nombre_rol>;



	practica3=# select DISTINCT privilege_type 
 	from information_schema.TABLE_PRIVILEGES 
 	where grantee = 'postgres';
 	privilege_type 
	----------------
	DELETE
 	INSERT
 	REFERENCES
 	SELECT
 	TRIGGER
 	TRUNCATE
 	UPDATE
	(7 rows)

	practica3=# select DISTINCT privilege_type,table_name 
 	from information_schema.TABLE_PRIVILEGES 
 	where grantee = 'alvaro';
 	privilege_type | table_name 
	----------------+------------
 	DELETE         | usuarios
 	INSERT         | usuarios
 	SELECT         | usuarios
 	TRIGGER        | usuarios
 	TRUNCATE       | usuarios
	(5 rows)

	practica3=# 


	practica3=# 



6) Realiza consultas al diccionario de datos en Postgres para averiguar qué usuarios pueden consultar una tabla concreta.

	select grantee
	from information_schema.table_privileges
	where table_name = <nombre_table>
	and privilege_type = 'SELECT';


	practica3=# select grantee
 	from information_schema.table_privileges
 	where table_name = 'usuarios'    
 	and privilege_type = 'SELECT';
 	grantee  
	----------
 	postgres
 	alvaro
	(2 rows)

	practica3=# 




ORACLE:

7) Realiza una función de verificación de contraseñas que compruebe que la contraseña difiere en más de tres caracteres de la anterior y que la longitud de la misma es diferente de la anterior. Asígnala al perfil CONTRASEÑASEGURA. Comprueba que funciona correctamente.



       
8) Realiza un procedimiento llamado MostrarPrivilegiosdelRol que reciba el nombre de un rol y muestre los privilegios de sistema y los privilegios sobre objetos que lo componen.




	#  Privilegios del sistema
	create or replace procedure privdelsistema (p_role ROLE_SYS_PRIVS.ROLE%type)
	is
		cursor c_privi
		is
		select DISTINCT PRIVILEGE
		from ROLE_SYS_PRIVS 
		where ROLE=p_role; 

	begin
	   	dbms_output.put_line('Privilegios Del Sistema');
	        dbms_output.put_line('-----------------');
		for v_privi in c_privi loop
			dbms_output.put_line(chr(9)|| v_privi.PRIVILEGE);
		end loop;
	END;
	/

	exec privdelsistema('DBA');


	#  Privilegios sobre objetos que lo componen el rol

	create or replace procedure privdeobjeto (p_role ROLE_TAB_PRIVS.ROLE%type)
	is
		cursor c_privi2
		is
		select DISTINCT PRIVILEGE, owner, table_name
		from ROLE_TAB_PRIVS 
		where ROLE=p_role; 
	
	begin
	    	dbms_output.put_line('Privilegios Sobre Objetos');
	    	dbms_output.put_line('------------------');
		for v_privi in c_privi2 loop
			dbms_output.put_line(chr(9)|| v_privi.PRIVILEGE|| v_privi.table_name || v_privi.owner);
		end loop;
	END;
	/
	
	exec privdeobjeto('DBA');

	# MOSTRAR TODOS LOS PRIVILEGIOS

	create or replace procedure MostrarPrivilegiosRol(p_role ROLE_TAB_PRIVS.ROLE%type)
	is
	begin

		dbms_output.put_line('ROL: '||p_role);
		dbms_output.put_line('------------------------------------------------------');
		dbms_output.put_line('PRIVILEGIOS SISTEMA:');
		dbms_output.put_line('------------------------------------------------------');
		privdelsistema(p_role);
		dbms_output.put_line('------------------------------------------------------');
		dbms_output.put_line('PRIVILEGIOS SOBRE OBJETOS:');
		privdeobjeto(p_role);
	END;
	/

	exec MostrarPriviRol('DBA');
	

	create or replace function comprobarrol(p_rol varchar2)
	return number
	is
	    v_resultado varchar2(30);
	begin
	    select role into v_resultado
	    from dba_roles
	    where role=p_rol;
	    return 0;
	exception
	    when NO_DATA_FOUND then
	        dbms_output.put_line('No existe ese rol '|| p_rol);
	        return -1;
	end comprobarrol;
	/
	


